plugins {
    id("org.openapi.generator") version("5.0.0")
    id("org.springframework.boot") version("2.4.2")
    id("io.spring.dependency-management") version("1.0.11.RELEASE")
    id("java")
}

group = "io.github.consolero"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    // Dependencies copied from build.gradle file generated by openApiGenerate.
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.data:spring-data-commons")
    val springfoxVersion = "2.9.2"
    implementation("io.springfox:springfox-swagger2:${springfoxVersion}")
    implementation("io.springfox:springfox-swagger-ui:${springfoxVersion}")
    implementation("javax.xml.bind:jaxb-api:2.3.1")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    implementation("org.openapitools:jackson-databind-nullable:0.2.1")
    implementation("javax.validation:validation-api")
    implementation("com.fasterxml.jackson.core:jackson-databind")
}

val genDir = "${project.buildDir}/generated"

openApiGenerate {
    inputSpec.set("${project.rootDir}/src/main/resources/petstore.yaml")
    outputDir.set(genDir)

    generatorName.set("spring") // generates a Spring Boot server

    val packageName = "io.github.consolero.bootbootboot.server"
    apiPackage.set(packageName)
    modelPackage.set(packageName)
    invokerPackage.set("${packageName}.impl")
    configOptions.put("delegatePattern", "true")
}

sourceSets["main"].java.srcDir(file("${genDir}/src/main/java"))
sourceSets["test"].java.srcDir(file("${genDir}/src/test/java"))

tasks.withType<JavaCompile> {
    dependsOn(tasks.openApiGenerate)
}

tasks.getByName<org.springframework.boot.gradle.tasks.bundling.BootJar>("bootJar") {
    archiveClassifier.set("boot")
    mainClassName = "io.github.consolero.bootbootboot.server.impl.OpenAPI2SpringBoot"
}

tasks.getByName<Jar>("jar") {
    enabled = true
}

tasks.withType<Test> {
    useJUnitPlatform()
}
